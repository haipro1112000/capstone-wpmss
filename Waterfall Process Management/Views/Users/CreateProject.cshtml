
@{
    ViewBag.Title = "CreateProject";
    Layout = "~/Views/Shared/_UserMaster.cshtml";
    @* sweetalert *@
    <script src="~/Assets/sweetalert2-11.1.9/package/dist/sweetalert2.all.min.js"></script>
    <link href="~/Assets/sweetalert2-11.1.9/package/dist/sweetalert2.min.css" rel="stylesheet" />

}

<!--------------------------------------------------------- CONTENT ----------------------------------------------------------->
<div id="container">
    <form class="form-newproject">
        <h2 class="title">Let's build a Project</h2>
        <div class="form__content">
            <div class="form__left">
                <div class="form-detail">
                    <label>Project Name</label>
                    <input id="projectName" type="text" name="proname" class="form" placeholder="Please enter Project Name..."
                           required />
                </div>
                <div class="form-detail">
                    <label>Project Type</label>
                    <input id="projectType" type="text" name="protype" class="form" placeholder="Please enter Project Type..."
                           required />
                </div>
                <div class="form-detail">
                    <label>Project Manager</label>
                    <select id="listUsername" style="font-size: 1.4rem;">
                        <option value="" style="color:#888;" selected></option>
                        @foreach (var ACCOUNT in ViewBag.username)
                        {
                            <option value="@ACCOUNT.MemberName"> @ACCOUNT.MemberName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form__right">
                <div class="form-detail">
                    <label>Estimated Start Date</label>
                    <input id="startDate" type="date" name="form-date" required />
                </div>
                <div class="form-detail">
                    <label>Estimated End Date</label>
                    <input id="endDate" type="date" name="endate" class="form" required />
                </div>
                <div class="form-detail">
                    <label>Project Description</label>
                    <textarea id="projectDes" style="font-size:1.4rem" placeholder="Please enter Project Description..." required></textarea>
                </div>
            </div>
        </div>
        <div class="form__btn">
            <div onclick="AddProject()" style="cursor:pointer;" class="button-left">Create Project</div>
            <button onclick="cancel()" class="button-right" type="submit">Cancel</button>
        </div>
    </form>
</div>

<script>
    // toast
    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    })
</script>

<script type="text/javascript">

    // biến Acc_ID, Role_ID
    var AccID = '';

    //add method
    function AddProject() {

        // get ID de lay
        var projectName = document.getElementById('projectName').value;
        var projectType = document.getElementById('projectType').value;
        var e = document.getElementById("listUsername");
        var projectManager = e.options[e.selectedIndex].value;

        var date = new Date();
        var startDate = date.toISOString().substring(0, 10);
        var endDate = date.toISOString().substring(0, 10);
        document.getElementById('startDate').value = startDate;
        document.getElementById('endDate').value = endDate;
        var projectDescription = document.getElementById('projectDes').value;
        
        // Acc_ID, Role_ID
        var roleDefaultCreatePrject = 1;
        
        if (projectName == '' || projectType == '' || projectManager == '' || startDate == '' || endDate == '' || projectDescription == '') {
            Toast.fire({
                text: 'You must fill enough before add new !!!',
                icon: 'warning',
                iconColor: 'red',
            })
            return;
        }
        Swal.fire({
            text: "You want add new project ?",
            showCancelButton: true,
            showConfirmButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            icon: 'question',
            iconColor: '#457b9d',
            confirmButtonColor: '#457b9d',
            cancelButtonColor: '#457b9d'
        }).then((result) => {
            if (result.isConfirmed) {
                var form = new FormData(); // tao form data
                // bo nhung cai tren kia vao form
                form.append("projectName", projectName);
                form.append("projectType", projectType);
                form.append("projectManager", projectManager);
                form.append("startDate", startDate);
                form.append("endDate", endDate);
                form.append("projectDescription", projectDescription);

                // role mặc định khi tạo project Plan
                form.append("roleDefaultCreatePrject", roleDefaultCreatePrject);
                // accid
                //form.append("accid", AccID);

                // tạo xhr giống json
                // XMLHttpRequest() : để lấy yêu cầu của người dùng
                var xhr = new XMLHttpRequest();
                // mở cái API và đường dẫn
                xhr.open("POST", domain + '/Users/AddProject', true);

                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var kq = xhr.responseText;
                        var js = JSON.parse(kq);
                        if (js.Data.status == "OK") {
                            let timerInterval
                            Swal.fire({
                                title: 'Creating Project !!!',
                                //html: 'I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                /* Read more about handling dismissals below */
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    location.reload();
                                }
                            })
                        }
                        else {
                            Toast.fire({
                                icon: 'error',
                                text: 'Add error',
                                iconColor: 'red',
                            })
                        }
                    }
                }
                xhr.send(form);
            }
        })
    }

    //end function Add


    // cancel
    function cancel() {
        location.reload();
    }
</script>



